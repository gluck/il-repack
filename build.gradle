ext.ullinkGradleScripts = 'https://raw.github.com/gluck/gradle-scripts/master'
apply from: "${ext.ullinkGradleScripts}/task-rules.gradle"
apply from: "${ext.ullinkGradleScripts}/functions.gradle"

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "com.ullink.gradle:gradle-msbuild-plugin:2.4"
        classpath "com.ullink.gradle:gradle-nuget-plugin:2.5"
        classpath "com.ullink.gradle:gradle-nunit-plugin:1.1"
        classpath "com.ullink.gradle:gradle-opencover-plugin:1.1"
    }
}

apply plugin:'msbuild'
apply plugin:'nuget'
apply plugin:'nunit'
apply plugin:'com.ullink.opencover-nunit'

archivesBaseName = 'ILRepack'
version = '2.0.0'

defaultTasks('nugetPack')

def removeExtension(String path) {
    path.replaceFirst(~/(?<=.)\.[^\.]+$/, '')
}

msbuild.dependsOn nugetRestore
msbuild {
    def netVersion = project.version + '.0'
    replaceAssemblyAttribute('ILRepack/Properties/AssemblyInfo.cs', 'AssemblyVersion', netVersion)
    replaceAssemblyAttribute('ILRepack/Properties/AssemblyInfo.cs', 'AssemblyFileVersion', netVersion)

    solutionFile = 'ILRepack.sln'
    configuration = 'Debug'
    projectName = 'ILRepack'
    inputs.file(project.buildFile)
}

nunit {
    testAssemblies = [ msbuild.projects['ILRepack.Tests'].properties.TargetPath, msbuild.projects['ILRepack.IntegrationTests'].properties.TargetPath ]
}

ext.repackList = ['ILRepack.exe', 'Fasterflect.dll', 'BamlParser.dll', 'Mono.Cecil.dll', 'Mono.Cecil.Mdb.dll', 'Mono.Cecil.Pdb.dll', 'Mono.Posix.dll']

// repacking of all dependencies in a single exe
task repack(dependsOn: msbuild) {
    inputs.files {
        def workingDir = msbuild.mainProject.getProjectPropertyPath('OutputPath')
        return project.ext.repackList.collect { new File(workingDir, it) }
    }
    ext.repacked = new File(temporaryDir, 'ILRepack.exe')
    ext.repackedLib = new File(temporaryDir, 'ILRepack.dll')
    outputs.files([ext.repacked, ext.repackedLib, removeExtension(ext.repacked.path)+'.pdb'])
}

repack << {
    exec {
        workingDir = msbuild.mainProject.getProjectPropertyPath('OutputPath')
        commandLine = [new File(workingDir, 'ILRepack.exe'), '/log', '/wildcards', '/internalize', '/ndebug', '/out:'+ext.repacked] + project.ext.repackList
    }
    exec {
        workingDir = msbuild.mainProject.getProjectPropertyPath('OutputPath')
        commandLine = [new File(workingDir, 'ILRepack.exe'), '/log', '/wildcards', '/internalize', '/keyfile:'+file('ILRepack/ILRepack.snk'), '/out:'+ext.repackedLib, '/target:library'] + project.ext.repackList
    }
}

def commonNuspecMetadata(def meta) {
    meta.version version
    meta.title 'ILRepack - Open-source alternative to ILMerge'
    meta.authors 'Francois Valdy'
    meta.owners 'Francois Valdy'
    meta.projectUrl('https://github.com/gluck/il-repack')
    meta.copyright 'Copyright © Francois Valdy 2011-2015'
}

// nuget package for upload to nuget
nugetPack {
    nuspec {
        metadata() {
            commonNuspecMetadata(delegate)
            id archivesBaseName
            delegate.description '''ILRepack is meant at replacing ILMerge / Mono.Merge.
            The former being closed-source, impossible to customize, slow, resource consuming and many more. The later being deprecated, unsupported, and based on an old version of Mono.Cecil.'''
            requireLicenseAcceptance false
            summary 'ILRepack is a utility that can be used to merge multiple .NET assemblies into a single assembly'
        }
        delegate.files() {
            delegate.file(src: repack.ext.repacked, target: 'tools')
        }
    }
}

task nugetPackLib(type: com.ullink.NuGetPack) {
    nuspec {
        metadata() {
            commonNuspecMetadata(delegate)
            id archivesBaseName+'.Lib'
            delegate.description '''ILRepack is meant at replacing ILMerge / Mono.Merge.
            The former being closed-source, impossible to customize, slow, resource consuming and many more. The later being deprecated, unsupported, and based on an old version of Mono.Cecil.

            This package provides a library, for use within tools/build projects.
            If you need the tool as an executable, this is not the package you're looking for, this one is: http://www.nuget.org/packages/ILRepack/.'''
            requireLicenseAcceptance false
            summary 'ILRepack is a utility that can be used to merge multiple .NET assemblies into a single assembly (Packaged as library)'
        }
        delegate.files() {
            delegate.file(src: repack.ext.repackedLib, target: 'lib/net35')
        }
    }
}

nugetPack.dependsOn([repack, msbuild, nugetPackLib])

// nuget package upload, requires API key to be set
nugetPush {
    apiKey = project.properties.nugetApiKey
    nupkgFile = nugetPack.getPackageFile()
}

task nugetPushLib(type: com.ullink.NuGetPush) {
    apiKey = project.properties.nugetApiKey
    nupkgFile = nugetPackLib.getPackageFile()
}

nugetPush.dependsOn(nugetPushLib)
