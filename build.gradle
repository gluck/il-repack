import org.gradle.internal.os.OperatingSystem

plugins {
  id "com.ullink.msbuild" version "2.10"
  id "com.ullink.nuget" version "2.11"
  id "com.ullink.nunit" version "1.2"
  id "com.ullink.opencover" version "1.1"
}

archivesBaseName = 'ILRepack'

defaultTasks('nugetPack')

nuget {
    // use legacy v2 because of random download issues:
    // https://github.com/NuGet/Home/issues/1448
    version = '3.2.1-rc'
}

assemblyInfoPatcher {
    version = project.version + '.0'
}

msbuild.dependsOn nugetRestore
msbuild {
    solutionFile = 'ILRepack.sln'
    configuration = OperatingSystem.current().unix ? 'Debug_unix' : 'Release'
    projectName = 'ILRepack'
    inputs.file(project.buildFile)
}

nunit {
    exclude 'LongRunning'
    testAssemblies = [ msbuild.projects['ILRepack.Tests'].properties.TargetPath, msbuild.projects['ILRepack.IntegrationTests'].properties.TargetPath ]
}
nunit.dependsOn msbuild

task nunitLongRunning(type: nunit.class) {
    include 'LongRunning'
    testAssemblies = [ msbuild.projects['ILRepack.IntegrationTests'].properties.TargetPath ]
}
nunitLongRunning.dependsOn msbuild

ext.repackList = ['ILRepack.exe', 'Fasterflect.dll', 'BamlParser.dll', 'Mono.Cecil.dll', 'Mono.Cecil.Mdb.dll', 'Mono.Cecil.Pdb.dll', 'Mono.Posix.dll']

// repacking of all dependencies in a single exe
task repack(dependsOn: [msbuild, nunitLongRunning]) {
    inputs.files {
        def workingDir = msbuild.mainProject.getProjectPropertyPath('OutputPath')
        return project.ext.repackList.collect { new File(workingDir, it) }
    }
    ext.repacked = new File(temporaryDir, 'ILRepack.exe')
    ext.repackedLib = new File(temporaryDir, 'ILRepack.dll')
    outputs.files([ext.repacked, ext.repackedLib, ext.repacked.path.replace('.exe','.pdb')])
}

repack << {
    exec {
        workingDir = msbuild.mainProject.getProjectPropertyPath('OutputPath')
        commandLine = [new File(workingDir, 'ILRepack.exe'), '/log', '/wildcards', '/internalize', '/ndebug', '/out:'+ext.repacked] + project.ext.repackList
    }
    exec {
        workingDir = msbuild.mainProject.getProjectPropertyPath('OutputPath')
        commandLine = [new File(workingDir, 'ILRepack.exe'), '/log', '/wildcards', '/internalize', '/keyfile:'+file('ILRepack/ILRepack.snk'), '/out:'+ext.repackedLib, '/target:library'] + project.ext.repackList
    }
}

def commonNuspecMetadata = [
    version: version,
    title: 'ILRepack - Open-source alternative to ILMerge',
    authors: 'Francois Valdy',
    owners: 'Francois Valdy',
    projectUrl: 'https://github.com/gluck/il-repack',
    copyright: 'Copyright © Francois Valdy 2011-2015',
    requireLicenseAcceptance: false,
    dependencies: []
]

// nuget package for upload to nuget
nugetSpec {
    nuspec = [
        metadata: commonNuspecMetadata + [
            id: archivesBaseName,
            description: '''ILRepack is meant at replacing ILMerge / Mono.Merge.
            The former being closed-source, impossible to customize, slow, resource consuming and many more. The later being deprecated, unsupported, and based on an old version of Mono.Cecil.''',
            summary: 'ILRepack is a utility that can be used to merge multiple .NET assemblies into a single assembly'
        ],
        files: [
            { file(src: repack.ext.repacked, target: 'tools') }
        ]
    ]
}

task nugetSpecLib(type: com.ullink.NuGetSpec) {
    nuspec = [
        metadata: commonNuspecMetadata + [
            id: archivesBaseName+'.Lib',
            description: '''ILRepack is meant at replacing ILMerge / Mono.Merge.
            The former being closed-source, impossible to customize, slow, resource consuming and many more. The later being deprecated, unsupported, and based on an old version of Mono.Cecil.

            This package provides a library, for use within tools/build projects.
            If you need the tool as an executable, this is not the package you're looking for, this one is: http://www.nuget.org/packages/ILRepack/.''',
            summary: 'ILRepack is a utility that can be used to merge multiple .NET assemblies into a single assembly (Packaged as library)'
        ],
        files: [
            { file(src: repack.ext.repackedLib, target: 'lib/net40') }
        ]
    ]
}

task nugetPackLib(type: com.ullink.NuGetPack) {
    dependsOn nugetSpecLib
}
nugetPack.dependsOn([repack, nugetPackLib])
nugetPackLib.dependsOn repack

// nuget package upload, requires API key to be set
nugetPush {
    apiKey = project.properties.nugetApiKey
    nupkgFile = nugetPack.packageFile
}

task nugetPushLib(type: com.ullink.NuGetPush) {
    apiKey = project.properties.nugetApiKey
    nupkgFile = nugetPackLib.packageFile
}

nugetPush.dependsOn nugetPushLib
